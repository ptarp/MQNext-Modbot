|
| Modbot.mac
|
| #define echo mqlog
#turbo 100
#warning

#include modbot.inc
#include modmelee.inc
#include modheal.inc
#include moddebuff.inc
#include modevent.inc
#include modbuff.inc
#include modcure.inc
#include modpull.inc
#include modloot.inc
#include modmove.inc
#include modextra.inc

| Uncomment these if you'd like commands to work via group and chat channels.
 #chat group
| #chat chat
 #chat tell

Sub Main(INI)
   /delay 2 ${Macro.Name.Equal[modbot.mac]}
   /declare MBCommon string outer MBCommon.ini
   /declare MBDebug bool outer FALSE
   /declare a int local
   /declare b int local
   /declare tDist string local
   /declare MakeCampR int local
   /declare MakeCampRX int local
   /declare MakeCampRY int local
   /declare PetShrinkTries int outer
   /declare SelfShrinkTries int outer
   /declare IniFile string outer
   /declare AAIniFile string outer AA_${Me.Name}.ini
   /call LoadINIVar Settings IniLocation "* Path to MB_Name.ini file.  example - MBIni/ sets your .ini files in macros/MBIni/MB_Name.ini" IniLocation "${MBCommon}" string
   /if (${IniLocation.Left[1].Equal[*]}) /varset IniLocation
   /if (${INI.Length}) {
      /varset IniFile ${IniLocation}MB_${Me.Name}_${INI}
   } else /if (${Me.Shrouded}) {
      /if (${Select[${Me.Race.Name.Arg[1]},wood,high,dark,dwarf,barbarian,ogre,gnome,human,troll,froglok,halfling,erudite]}) {
         /varset IniFile ${IniLocation}MB_${Me.Level}_${Me.Class}
      } else {
         /varset IniFile ${IniLocation}MB_${Me.Race}_${Me.Class}
      }
   } else {
      /varset IniFile ${IniLocation}MB_${Me.Name}
   }
   /if (!${IniFile.Find[.ini]}) /varset IniFile ${IniFile}.ini
   /varset AAIniFile ${IniLocation}AA_${Me.Name}.ini
   
   /call LoadINIVar Settings TimeStampOnEcho FALSE TimeStampOnEcho "${IniFile}" bool
   /echo
   /echo ${If[${TimeStampOnEcho},[${Time}] ,]}ModBot is initializing...

   /call Startup
      
   /call SetupAdvLootVars 
   /call AAInit ${If[${Me.Shrouded},${Me.Race}_${Me.Class}, ]}
   /call LoadACINIVals
   /call LoadAHINIVals
   /call LoadADINIVals
   /call LoadABINIVals
   /call LoadAEINIVals
   /call LoadAPINIVals
   /call LoadAMINIVals
   /call LoadAQINIVals

   /if (${MBDebug}) { 
      /if (!${Defined[AHGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Heals in your ini
      /if (!${Defined[ABGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Buffs in your ini
      /if (!${Defined[ADGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Debuffs in your ini
      /if (!${Defined[AEGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Events in your ini
      /if (!${Defined[AQGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Cures in your ini
   }
   
| EQBC channels Join specific classes, then group channels
/declare chanList string local ${Me.Class.ShortName}
/if (${Select[${Me.Class.ShortName},shm,clr,dru]}) /varset chanList ${chanList} healers
/if (${Select[${Me.Class.ShortName},rng,bst,brd,shd,pal]}) /varset chanList ${chanList} hybrid
/if (${Select[${Me.Class.ShortName},mag,wiz,enc,nec]}) /varset chanList ${chanList} casters
/if (${Select[${Me.Class.ShortName},war,rog,mnk,brz,ber]}) /varset chanList ${chanList} melee
/if (${Select[${Me.Class.ShortName},war,shd,pal]}) /varset chanList ${chanList} tanks
/if (!${Select[${Ini["${IniFile}","Settings","EQBCChannels",NOTFOUND]},NOTFOUND,NULL]}) /varset chanList ${chanList} ${Ini["${IniFile}","Settings","EQBCChannels"]}
/bccmd channels ${chanList}

| Create Empty Defense script, if not exists
   /call MBScript Defense Startup
   /call MBScript MBStartup
   
   
   /doevents flush
   /if (${Window[RespawnWnd].Open} || ${Me.State.Equal[HOVER]}) {
      /call Event_Slain
      /call Event_DelayOnZone
   }
   /if (${Ini["${IniFile}",Settings,DeathSlot]}) { 
      /ini "${IniFile}" "Settings" "DeathSlot" "FALSE"
      /bc Msg: Death from previous run detected. Please Look for my Corpse. Resuming ModBot operation.
   }
   /if (${DoPull}) /mb makecamp
   /if (${Window[SpellBookWnd].Open}) /book
   /if (${Me.Shrouded} && ${DoAA}) /call AAPicker 
   /if (${Ini["${IniFile}",Script-Startup,Commands]}) /call MBScript Startup

   /echo ${If[${TimeStampOnEcho},[${Time}] ,]}EmuModBot v5.22 has started!
   /echo
   /if (${${FollowPlug}.Following}) /call AdvPlugCall off
:MainLoop
   /delay 1
   /if (${FollowName.Length} && ${Spawn[${FollowName}].ID} && !${CampStatus}  && !${Spawn[${Me}'s corpse'].ID}) {
  |/docommand ${If[${Defined[CurrLoc]},/call FollowFunction "${FollowName}",/varset FollowFlag 1]}
  |/docommand ${If[${${FollowPlug}.Active} && ${AdvPlug},/call AdvPlugCall "${FollowName}",/varset FollowFlag 1]}
  /if (${DoLoot} && ${Target.Type.Equal[corpse]}) /goto :tContNoFollow
  /if (!${${FollowPlug}.Paused} && ${Spawn[${FollowName}].Distance} > 35 && !${Me.Moving} && !${Melee.Combat}) {
    /if (${Stick.Status.Equal[on]}) /stick off
    /target id ${Spawn[${FollowName}].ID}
    /delay 5 ${Target.ID}==${Spawn[${FollowName}].ID}
    /if (!${${FollowPlug}.Following}) {
      /docommand /${FollowCommand}
    }
  }
  /if (${${FollowPlug}.Paused}) /docommand /${FollowCommand} unpause
:tContNoFollow
}

   /if (!${Zone.Name.Equal[${ZoneName}]} || (!${Window[RespawnWnd].Open} && !${Me.ID})) {
      /call Event_DelayOnZone
   }
   /if (${Select[${Me.State},HOVER,DEAD]}) {
      /call Event_Slain 
   }
   /if (!${MBPause}) {
      /doevents
      /call SetTank
      /call SetPuller
      /varset SpellWasCast FALSE
      /if (${DoPull}) {
         /if (!${APCheckTimer} && ${CampStatus} && !${ACState} && !${Melee.Combat} && !${APAggro}) /call AdvPull
         /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampY},${MakeCampX}]}>40 && (${APTargetID} || ${ACMATarget}) && ${Spawn[${ACMATarget}].PctHPs}>25 || (${APAggro} && ${APTargetID})) /call CompleteAP
      }
      /if (${DoMelee}) {
         /if (${ACState} && (!${Spawn[${ACMATarget}].ID} || ${Spawn[${ACMATarget}].Type.Equal[corpse]} || ${Spawn[${ACMATarget}].Feigning})) {
            /call AdvCombat
         } else /if (${SpawnCount[npc radius ${ACLeash} zradius ${ZRadius}]}) {
            /call AdvCombat
         } else /if (${APTargetID} && !${Spawn[${ACMATarget}].ID}) {
            /call AdvCombat
         }
      }
      /if (${DoHeals} && ${AHCount}) /call AHHealCheck
      /if (${Me.Class.ShortName.Equal[BRD]} || !${Me.Moving} || ${ACState}) {
         /if (${DoDebuffs} && ${ADCount}) /call ADDebuffCheck
         /if (${DoEvents} && ${AECount}) /call AEEventCheck
         /if (${DoBuffs} && ${ABCount}) /call ABBuffCheck
         /if (${DoCures} && ${AQCount}) /call AQCureCheck
      }
      /if (${SpellWasCast}) {
         /call StuckGemsCheck
         /varset SpellWasCast FALSE
      }
   }
   /if (${DoMelee}) {
      /if (!${Spawn[${NetBots[${TankName}].TargetID}].Type.Equal[pc]} && ${ACState}) {
         /call AdvCombat
      } else /if (${Spawn[${NetBots[${TankName}].TargetID}].Type.Equal[pc]} && !${ACState}) {
         /call AdvCombat
      } else /if (${OffTank}) {
         /if (${ADMobCount}>1 && ${Target.ID}==${NetBots[${TankName}].TargetID}) /call AdvCombat
      }
   }
   /if (!${Melee.Combat} && ${Select[${Me.CombatState},COOLDOWN,RESTING]}) {
      /if (!${Spawn[${NetBots[${TankName}].TargetID}].Type.Equal[npc]} && ${ACState} || ${Spawn[${NetBots[${TankName}].TargetID}].Type.Equal[npc]} && !${ACState}) /call AdvCombat
   }
   /if (!${ACState} && !${Melee.Combat}) {
      /if (${Me.Class.ShortName.Equal[BRD]}) {
         /if (!${MBPause} && ${DoBuffs} && ${BardRestGems.Length} && !${Me.State.Equal[sit]} && (${Twist.List.NotEqual[${BardRestGems} ]} || !${Twist})) {  
|        /if (!${MBPause} && ${DoBuffs} && ${BardRestGems.Length} && (${Twist.List.NotEqual[${BardRestGems} ]} || !${Twist})) {  	
|           /if (${Me.State.Equal[sit]}) /stand
            /squelch /stoptwist
            /squelch /twist ${BardRestGems}
            /if (${InfoMsgLevel}) {
               /echo ${If[${TimeStampOnEcho},[${Time}] ,]}Msg: Rest gems
            }
         } else {
            /if (${Twist} && !${BardRestGems.Length} && !${MBPause} && !${Me.State.Equal[sit]}) /twist off
|           /if (${Twist} && !${BardRestGems.Length} && !${MBPause}) /twist off
         }
      }  
      /if (!${Me.Casting.ID} || ${Me.Class.ShortName.Equal[BRD]}) {
         /call AdvPathCall
         /doevents
         /if (${DoLoot}) {
            /if (!${MBPause} && !${Me.Moving}) {
               /if (${LootMobs} && !${ALDontLootTimer} && (!${ADMobFound} || ${MobsTooClose}<=5)) {
                  /if (${SpawnCount[corpse radius ${CorpseRadius} zradius ${ZRadius} noalert 25]}) {
                     /call LootMobs 
                     /if (${Corpse.Open}) /nomodkey /notify LootWnd LW_DoneButton leftmouseup
                  }
               }
            }
         }
      }
   }

   /if (${QueueCount}) {
      /if (${DoBuffs}) /call DoBuffEvents
   }
   /if (${DoEvents} && ${AECount}) /call AEEventCheck
   /doevents
   /if (${MBPause}) {
      /if (${FollowFlag} && ${Me.Mount.ID}) /dismount
   } else {
      /if (${DoBuffBot}) /goto :MainLoop
      /if (${DoHeals} && ${AHCount} && !${AHCheckTimer}) /call AHHealCheck
   }
   /if (${Stick.Status.Equal[PAUSED]}) {
      /if (${DoMelee} && ${ACState} && ${Cast.Status.Equal[I]}) /squelch /stick unpause
   }
   /if (${FollowName.Length} && ${Spawn[${FollowName}].Distance}> 20) /call AdvPlugCall ${FollowName}
   /if (!${MBPause} && !${MiscCheckTimer} && !${APPullDelay}) {
      /varset MiscCheckTimer 1s
      /if (${DoStuckGems}) {
         /call StuckGemsCheck
      }
      /if (${MakeCamp.Status.Equal[on]} && ${CampStatus}==2 && ${Me.Moving} && !${ADMobFound}) {
         /nomodkey /keypress back
         /varset CampStatus 1
      }		
      /if (!${Me.Moving}) {
	     /call ADSpawnCheck
	  } else /if (${SpawnCount[npc los radius ${ACLeash} zradius ${ZRadius}]}) {
	     /call ADSpawnCheck
	  }
      /if (!${ACState} && !${Melee.Combat} && !${Me.Moving} && (${Me.Class.ShortName.Equal[BRD]} || !${Me.Casting.ID})) {
         /if (${MakeCamp.Status.Equal[on]} && ${CampStatus}==1 && !${Me.State.Equal[feign]} && !${FollowFlag}) {
            /varset CampStatus 2
            /if (${ACManaPct}!=101 || ${MakeCamp.CampDist}>2) {
               /if (${Me.Sitting}) {
                  /if (!${Me.Mount.ID}) /sit off
			   }
               /if (${MakeCamp.CampDist}>${MakeCamp.CampRadius}) {
			      /squelch /makecamp return
			   }
               /delay 1s !${Me.Moving}			   
               /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampY},${MakeCampX}]}>10) {
    		      /call MBMoveTo ${MakeCampY} ${MakeCampX} 0 20
               }
			   /delay 1s !${Me.Moving}
| Try to randomize our location within our CampRadius, but not more than 10
               /varcalc MakeCampR ${Math.Rand[1,${Math.Calc[${If[${MakeCamp.CampRadius}<10,${MakeCamp.CampRadius},10]}-1]}]}
			   /varcalc MakeCampRY ${MakeCampY}${If[${Math.Rand[1]},-,+]}${MakeCampR}
               /varcalc MakeCampR ${Math.Rand[1,${Math.Sqrt[${Math.Calc[(${If[${MakeCamp.CampRadius}<10,${MakeCamp.CampRadius},10]}^2)-(${MakeCampR}^2)]}]}]}
			   /varcalc MakeCampRX ${MakeCampX}${If[${Math.Rand[1]},-,+]}${MakeCampR}			   
               /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampRY},${MakeCampRX}]}<10) {
| Is this point within the camp radius? If not, we should't move there so let's not bother.
			      /if (${Math.Distance[${MakeCampY},${MakeCampX}:${MakeCampRY},${MakeCampRX}]}<${MakeCamp.CampRadius}) {
			         /call MBMoveTo ${MakeCampRY} ${MakeCampRX} 0 20
				  }
			   }
			   /delay 1s !${Me.Moving}
               /squelch /face Heading ${Math.Calc[${MakeCampD}${If[${Math.Rand[1]},-,+]}${Math.Rand[30]}]}
            }
         }
         /if (${DoPull}) {
            /if (${APAggro} && (!${APTargetID} || !${Spawn[${APTargetID}].ID})) /varset APAggro 0
         }
         /if (!${DoBuffs} && ${Me.Class.ShortName.Equal[BRD]}) {
            /if (${Twist}) /stoptwist
         }
         /if (${FollowFlag}>=10 && ${FollowFlagZoneDelay}) /varcalc FollowFlag ${FollowFlag}+1
|        /if (${Window[ConfirmationDialogBox].Open}) /notify ConfirmationDialogBox Yes_Button leftmouseup
         /if (${Window[AdventureRequestWnd].Open}) /nomodkey /keypress esc
         /if (${DoAA} && !${AACheckTimer}) /call AAPicker
      }
      /if (${DoForage}) {
         /if (${Me.AbilityReady[forage]}) {
            /if (!${Window[InventoryWindow].Open}) {		 
               /if (!${Me.Mount.ID} && !${Me.Standing}) /stand
               /delay 2
               /doability forage
               /delay 1s
            }
         }
      }
      /if (${Cursor.ID}) {
	     /call ClearCursor
	  }
      /if (${DoSit} && !${Melee.GotAggro}) /call SitCheck
   }
   /if (${DoCombines}) {
      /if (!${Cursor.ID}) {
         /if (${Window[TradeSkillWnd].Child[CombineButton].Enabled}) {
            /notify TradeskillWnd CombineButton leftmouseup
		 }
      } else {
         /call ClearCursor
      }
   }
   /if (${Window[TradeWnd].Open}) {
      /if (!${Window[TradeWnd].MyTradeReady} && !${Cursor.ID} && (${MasterList.Find[${Window[TradeWnd].Child[TRDW_HisName].Text}]} || ${NetBots.Client.Find[${Window[TradeWnd].Child[TRDW_HisName].Text}]})) {
         /delay 2
         /notify TradeWnd TRDW_Trade_Button leftmouseup
	  }
   }
   /if (${Window[MerchantWnd].Open}) {
      /if (${CurMerchant}==0 || ${CurMerchant}!=${Spawn[merchant ${Window[MerchantWnd].Child[MW_MerchantName].Text}].ID}) /call SearchVendor
   }
   /goto :MainLoop
:OnExit
   /call MainExit
/return

Sub MainExit
   /if (${Me.Class.ShortName.Equal[brd]}) /twist off
   /if (${${FollowPlug}.Following}) /docommand /${FollowCommand} off
   /endmacro
/return