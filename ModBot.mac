|
| Modbot.mac
|
#turbo 100
#warning

#include modbot.inc
#include modmelee.inc
#include modheal.inc
#include moddebuff.inc
#include modevent.inc
#include modbuff.inc
#include modcure.inc
#include modpull.inc
#include modloot.inc
#include modmove.inc
#include Mod_alerts.inc

| Uncomment these if you'd like commands to work via group and chat channels.
| #chat group
| #chat chat
#chat tell

Sub Main(MBParm)
   /delay 2 ${Macro.Name.Equal[modbot.mac]}
   /declare MBCommon string outer MBCommon.ini
   /declare MBDebug bool outer FALSE
   /declare MBNewIni bool outer FALSE
   /declare IniFile string outer
   /declare AAIniFile string outer
   /declare AAIniSection string outer
   /declare CZoneID int outer ${Zone.ID}
   /declare PipeChar string outer |
   /declare MBVersion string local 20230912${PipeChar}ModBot v6.00
   /declare IniSuffix string local
  


   /call LoadINIVar Settings IniLocation "* Path to MB_Name.ini file.  example - MBIni/ sets your .ini files in macros/MBIni/MB_Name.ini" IniLocation "${MBCommon}" string
   /if (${IniLocation.Left[1].Equal[*]}) /varset IniLocation
   /if (${MBParm.Length}) {
      /varset IniSuffix ${Me.Name}_${MBParm}
   } else /if (${Me.Shrouded}) {
      /if (${Select[${Me.Race.Name.Arg[1]},wood,high,dark,dwarf,barbarian,ogre,gnome,human,troll,froglok,halfling,erudite,vah]}) {
         /varset IniSuffix ${Me.Level}_${Me.Class}
      } else {
         /varset IniSuffix ${Me.Race}_${Me.Class}
      }
   } else {
      /varset IniSuffix ${Me.Name}
   }
   /varset IniFile ${IniLocation}MB_${IniSuffix}.ini

   /varset AAIniFile ${IniLocation}AA_${Me.Name}.ini
   /varset AAIniSection ${If[${Me.Shrouded},${Me.Race}_${Me.Class},AAtoBuy]}
   
   /if (!${Ini["${IniFile}"].Length}) {
      /echo Initializing NEW ModBot ini file: ${IniFile}
      /varset MBNewIni TRUE
   } else /if (${MBDebug}) {
      /echo Using ModBot ini file: ${IniFile}
   }
   
|  /call LoadINIVar Settings LastMBVersion "00000000" LastMBVersion "${IniFile}" string
   /call LoadINIVar Settings TimeStampOnEcho FALSE TimeStampOnEcho "${IniFile}" bool
   /echo
   /echo ${If[${TimeStampOnEcho},[${Time}] ,]}ModBot is initializing...

   /call Startup
   /call AAInit

   /call LoadACINIVals
   /call LoadAHINIVals
   /call LoadADINIVals
   /call LoadABINIVals
   /call LoadAEINIVals
   /call LoadAQINIVals
   /call LoadAPINIVals
   /call LoadAMINIVals
   /if (${MBDebug}) { 
      /if (!${Defined[AHGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Heals in your ini
      /if (!${Defined[ABGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Buffs in your ini
      /if (!${Defined[ADGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Debuffs in your ini
      /if (!${Defined[AEGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Events in your ini
      /if (!${Defined[AQGem]}) /echo ${If[${TimeStampOnEcho},[${Time}] ,]}I don't see any Cures in your ini
   }
   /call SetupAdvLootVars

| Create Empty Defense script, if not exists
   /call MBScript Defense Startup
   /call MBScript MBStartup

| Setup Default Ports
   /call LoadINIVar Ports Gate ${If[${Me.Book[${Me.Book[Gate]}].ID},""Gate${PipeChar}${Me.NumGems}"","" ""]} Gate "${IniFile}" string
   /call LoadINIVar Ports Evac ${If[${Me.AltAbility[Exodus].ID},""Exodus${PipeChar}alt"","" ""]} Evac "${IniFile}" string
   
|Set/Clear indicator for Pet Affinity status. Append to current contents (in case someone else is using this field?)
   /netnote ${If[${Me.AltAbility[Pet Affinity]},${If[${NetBots[${Me.CleanName}].Note.Find[MBPetAffinity]},${NetBots[${Me.CleanName}].Note},${If[${NetBots[${Me.CleanName}].Note.Length},${NetBots[${Me.CleanName}].Note} ,]}MBPetAffinity]},${If[${NetBots[${Me.CleanName}].Note.Find[MBPetAffinity]},${NetBots[${Me.CleanName}].Note.Replace[MBPetAffinity,]},${NetBots[${Me.CleanName}].Note}]}]}

|Load Zone-Restricted Spell Info for this zone
   /call LoadRestrictedSpells
   
| EQBC channels Join specific classes, then group channels
   /if (${JoinMBChannels}) {
      /declare chanList string local ${Me.Class.ShortName}
      /if (${Select[${Me.Class.ShortName},shm,clr,dru]}) /varset chanList ${chanList} healers
      /if (${Select[${Me.Class.ShortName},rng,bst,brd,shd,pal]}) /varset chanList ${chanList} hybrid
      /if (${Select[${Me.Class.ShortName},mag,wiz,enc,nec]}) /varset chanList ${chanList} casters
      /if (${Select[${Me.Class.ShortName},war,rog,mnk,ber]}) /varset chanList ${chanList} melee
      /if (${Select[${Me.Class.ShortName},war,shd,pal]}) /varset chanList ${chanList} tanks
      /if (!${Select[${Ini["${IniFile}","Settings","EQBCChannels",NOTFOUND]},NOTFOUND,NULL]}) /varset chanList ${chanList} ${Ini["${IniFile}","Settings","EQBCChannels"]}
      /bccmd channels ${chanList}
   }
   
   /call AdvPlugCall off
   /squelch /target clear
   /doevents flush
   /if (${Window[RespawnWnd].Open} || ${Select[${Me.State},HOVER,DEAD]}) {
      /call Event_Slain
      /call Event_DelayOnZone
   }
   /if (${Ini["${IniFile}",Settings,DeathSlot]}) { 
      /ini "${IniFile}" "Settings" "DeathSlot" "FALSE"
      /bc Msg: Death from previous run detected. Please Look for my Corpse. Resuming ModBot operation.
   }
   /if (${DoPull}) /call Command_MAKECAMP
   /if (${Window[SpellBookWnd].Open}) /book close
   /if (${Me.Pet.ID}) /pet hold on
   /if (${Me.Shrouded} && ${DoAA}) /call AAPicker 
   /if (${Ini["${IniFile}",Script-Startup,Commands]}) /call MBScript Startup

   /echo ${If[${TimeStampOnEcho},[${Time}] ,]}${MBVersion.Arg[2,${PipeChar}]} has started!
   /echo
   /echo ${If[${TimeStampOnEcho},[${Time}] ,]}Welcome to ${Zone.Name} (${ZoneTypes.Arg[${Math.Calc[${Zone.Type}+1]},,]})

   /declare MakeCampR int local
   /declare MakeCampRX int local
   /declare MakeCampRY int local
   /declare tTargetID int local
   /declare tCount int local
   /declare DrinkItem string local Short Beer
   /declare DrinkTimer timer local 10s
   /declare dTime string outer 10m 
   /declare drpNum int local
   /declare drsNum int local

:MainLoop
   /delay 1
   /if (!${Zone.Name.Equal[${ZoneName}]} || (!${Window[RespawnWnd].Open} && !${Me.ID})) {
      /call Event_DelayOnZone
   }
   /if (${Select[${Me.State},HOVER,DEAD]}) {
      /call Event_Slain
   }
   /doevents
   |/if (!${Me.Combat} && ${AdvPath.Following} && !${AdvPath.Paused} && !${Me.Moving} && ${FollowName.Length} > 1 && ${Spawn[id ${FollowID}].Distance} > ${FollowDistance}) {
   |   /target id ${FollowID}
   |   /delay 1s ${Target.ID}==${FollowID}
   |   /squelch /afollow on
   |}
   /if (!${DrinkTimer} && ${FindItemCount[=${DrinkItem}]} && ${Me.Skill[Alcohol Tolserance]}<375) {
      /if (!${Window[pack${Math.Calc[${FindItem[=${DrinkItem}].ItemSlot}-22]}].Open}) {
         /keypress I
         /delay 1s ${Window[InventoryWnd].Open}
         /itemnotify pack${Math.Calc[${FindItem[=${DrinkItem}].ItemSlot}-22]} rightmouseup
         /delay 1s ${Window[pack${Math.Calc[${FindItem[=${DrinkItem}].ItemSlot}-22]}].Open}
         /keypress i
      }
      /varset drpNum ${Math.Calc[${Me.Inventory[${FindItem[=${DrinkItem}].ItemSlot}].ItemSlot}-22].Int}
      /varset drsNum ${Math.Calc[${FindItem[=${DrinkItem}].ItemSlot2} + 1].Int}
      |/echo /itemnotify in pack${drpNum} ${drsNum} rightmouseup
      /itemnotify in pack${drpNum} ${drsNum} rightmouseup
      /varset DrinkTimer ${dTime}
   }
   /if (!${MBPause}) {
      /call SetTank
      /call SetPuller
      /varset SpellWasCast FALSE
      /if (${DoPull}) {
         /if (!${APCheckTimer} && ${CampStatus} && !${ACState} && !${Melee.Combat} && !${APAggro}) /call AdvPull
         /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampY},${MakeCampX}]}>40 && (${APTargetID} || ${ACMATarget}) && ${Spawn[${ACMATarget}].PctHPs}>25 || (${APAggro} && ${APTargetID})) /call CompleteAP
      }
      /if (${DoMelee}) {
         /if (${ACState} && (!${Spawn[${ACMATarget}].ID} || ${Spawn[${ACMATarget}].Type.Equal[corpse]} || ${Spawn[${ACMATarget}].Feigning})) {
            /call AdvCombat
         } else /if (${APTargetID} && !${Spawn[${ACMATarget}].ID}) {
            /call AdvCombat			
         } else {
            /if (${Me.Pet.ID} && ${Me.Pet.ID}==${TankID}) {
               /varset tCount ${SpawnCount[npc radius ${ACLeash} loc ${Pet.X} ${Pet.Y} ${Pet.Z} zradius ${ZRadius} noalert ${AlertList}]}
            } else {
               /varset tCount ${SpawnCount[npc radius ${ACLeash} zradius ${ZRadius} noalert ${AlertList}]}
            }
            /if (${tCount}) {
               /call AdvCombat
            }
         }
      }
      /if (${DoHeals} && ${AHCount}) /call AHHealCheck
      /if (${Me.Class.ShortName.Equal[BRD]} || !${Me.Moving} || ${ACState}) {
         /if (${DoDebuffs} && ${ADCount}) /call ADDebuffCheck
         /if (${DoEvents} && ${AECount}) /call AEEventCheck
         /if (${DoBuffs} && ${ABCount}) /call ABBuffCheck
         /if (${DoCures} && ${AQCount}) /call AQCureCheck
      }
      /if (${SpellWasCast}) {
         /call StuckGemsCheck
         /varset SpellWasCast FALSE
      }
   }
   /if (!${ACState} && !${Melee.Combat}) {
      /if (${ADMobCount}> 0 && ${DoMelee} && !${ACState} && ${NetBots[${TankName}].TargetID} && ${NetBots[${TankName}].TargetHP} < ${ACAssistPct} && !${Me.Name.Equal[${TankName}]}) {
         /echo Assisting Tank
         /call AdvCombat
         
      }
      /call AdvPathCall
      /if (${Me.Class.ShortName.Equal[BRD]} && !${MBPause}) {
         /if (${DoBuffs} && ${BardRestGems.Length} && !${Me.State.Equal[sit]} && (${Twist.List.NotEqual[${BardRestGems} ]} || !${Twist})) {  
            /squelch /stoptwist
            /squelch /twist ${BardRestGems}
            /if (${InfoMsgLevel}) {
               /echo ${If[${TimeStampOnEcho},[${Time}] ,]}Msg: Rest gems
            }
         } else {
            /if (${Twist} && !${BardRestGems.Length} && !${Me.State.Equal[sit]}) /squelch /twist off
         }
      }  
      /if (!${Me.Casting.ID} || ${Me.Class.ShortName.Equal[BRD]}) {
         /doevents
         /if (${DoLoot}) {
            /call LootMobs
            /if (!${LootCleanupTimer}) {
               /call LootCleanUp
            }
         }
      }
   }
   /if (${QueueCount}) {
      /if (${DoBuffs}) /call DoBuffEvents
   }
   /if (${DoEvents} && ${AECount}) /call AEEventCheck
   /doevents
   /if (${MBPause}) {
      /if (${FollowState} && ${Me.Mount.ID}) /dismount
   } else {
      /if (${DoBuffBot}) /goto :MainLoop
      /if (${DoHeals} && ${AHCount} && !${AHCheckTimer}) /call AHHealCheck
   }
   /if (${Stick.Status.Equal[PAUSED]}) {
      /if (${DoMelee} && ${ACState} && (${Cast.Status.Equal[I]} || ${Me.Class.ShortName.Equal[BRD]})) /squelch /stick unpause
   }
   /if (!${MBPause} && !${MiscCheckTimer} && !${APPullDelay}) {
      /varset MiscCheckTimer 1s
      /if (${DoStuckGems}) {
         /call StuckGemsCheck
      }
      /if (${MakeCamp.Status.Equal[on]} && ${CampStatus}==2 && ${Me.Moving} && !${ADMobFound}) {
         /nomodkey /keypress back
         /varset CampStatus 1
      }        
      /if (!${Me.Moving}) {
         /call ADSpawnCheck
      } else /if (${SpawnCount[npc los radius ${Radius} zradius ${ZRadius} noalert ${AlertList}]}) {
         /call ADSpawnCheck
      }
      /if (${ADMobCount}> 0 && ${DoMelee} && !${ACState} && ${NetBots[${TankName}].TargetID} && ${NetBots[${TankName}].TargetHP} < ${ACAssistPct} && !${Me.Name.Equal[${TankName}]}) {
         /echo Assisting Tank
         /call AdvCombat
         
      }
      /if (!${ACState} && !${Melee.Combat} && !${Me.Moving} && (${Me.Class.ShortName.Equal[BRD]} || !${Me.Casting.ID})) {
         /if (${MakeCamp.Status.Equal[on]} && ${CampStatus}==1 && !${Me.State.Equal[feign]} && !${FollowState}) {
            /varset CampStatus 2
            /if (${ACManaPct}!=101 || ${MakeCamp.CampDist}>2) {
               /if (${Me.Sitting}) {
                  /if (!${Me.Mount.ID}) /sit off
               }
               /if (${MakeCamp.CampDist}>${MakeCamp.CampRadius}) {
                  /squelch /makecamp return
               }
               /delay 1s !${Me.Moving}               
               /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampY},${MakeCampX}]}>10) {
                  /call MBMoveTo ${MakeCampY} ${MakeCampX} 0 20
               }
               /delay 1s !${Me.Moving}
| Try to randomize our location within our CampRadius, but not more than 10
               /varcalc MakeCampR ${Math.Rand[1,${Math.Calc[${If[${MakeCamp.CampRadius}<10,${MakeCamp.CampRadius},10]}-1]}]}
               /varcalc MakeCampRY ${MakeCampY}${If[${Math.Rand[1]},-,+]}${MakeCampR}
               /varcalc MakeCampR ${Math.Rand[1,${Math.Sqrt[${Math.Calc[(${If[${MakeCamp.CampRadius}<10,${MakeCamp.CampRadius},10]}^2)-(${MakeCampR}^2)]}]}]}
               /varcalc MakeCampRX ${MakeCampX}${If[${Math.Rand[1]},-,+]}${MakeCampR}               
               /if (${Math.Distance[${Me.Y},${Me.X}:${MakeCampRY},${MakeCampRX}]}<10) {
| Is this point within the camp radius? If not, we should't move there so let's not bother.
                  /if (${Math.Distance[${MakeCampY},${MakeCampX}:${MakeCampRY},${MakeCampRX}]}<${MakeCamp.CampRadius}) {
                     /call MBMoveTo ${MakeCampRY} ${MakeCampRX} 0 20
                  }
               }
               /delay 1s !${Me.Moving}
               /if (${UseHeadings}) {
                  /squelch /face nolook ${If[${MacroQuest.BuildName.Equal[emu]},fast ,]}heading ${Math.Calc[${MakeCampD}${If[${Math.Rand[1]},-,+]}${Math.Rand[30]}]}
               }
            }
         }
         /if (${DoPull}) {
            /if (${APAggro} && (!${APTargetID} || !${Spawn[${APTargetID}].ID})) /varset APAggro 0
         }
         /if (!${DoBuffs} && ${Me.Class.ShortName.Equal[BRD]}) {
            /if (${Twist}) /squelch /stoptwist
         }
         /if (${Window[AdventureRequestWnd].Open}) /nomodkey /keypress esc
         /if (${DoAA} && !${AACheckTimer}) /call AAPicker
      }
      /if (${DoForage}) {
         /call ForageStuff
      }
      /if (${DoFW}) {
         /if (${NeedFoodTimer} && ${SumFood.Length}>2) {
            /call SummonFW Food
         } else /if (${NeedDrinkTimer} && ${SumDrink.Length}>2) {
            /call SummonFW Drink
         }
      }
      /if (${Cursor.ID}) {
         /call ClearCursor
      }
      /if (${DoSit} && !${Melee.GotAggro} && !${Me.Moving}) /call SitCheck
   }
   /if (${DoCombines}) {
      /if (!${Cursor.ID}) {
         /if (${Window[TradeSkillWnd].Child[CombineButton].Enabled}) {
            /nomodkey /notify TradeskillWnd CombineButton leftmouseup
         }
      } else {
         /call ClearCursor
      }
   }
   /if (${Window[TradeWnd].Open}) {
      /if (!${Window[TradeWnd].MyTradeReady} && !${Cursor.ID} && (${MasterList.Find[${Window[TradeWnd].Child[TRDW_HisName].Text}]} || ${NetBots.Client.Find[${Window[TradeWnd].Child[TRDW_HisName].Text}]})) {
         /delay 2
         /nomodkey /notify TradeWnd TRDW_Trade_Button leftmouseup
      }
   }
   /if (${Window[MerchantWnd].Open}) {
      /if (${CurMerchant}==0 || ${CurMerchant}!=${Spawn[merchant ${Window[MerchantWnd].Child[MW_MerchantName].Text}].ID}) /call SearchVendor
   }
   |/if (${Select[${Me.Class.ShortName},rog,brd]} && ${Me.AbilityReady[Sense Traps]}) /doability "Sense Traps"
   /goto :MainLoop
:OnExit
   /call MainExit
/return

Sub MainExit
   /if (${Me.Class.ShortName.Equal[brd]}) /squelch /twist clear
   /squelch /stick off
   /squelch /afollow off
   /squelch /makecamp off
| Clear indicator for Pet Affinity status. Preserve other contents (in case someone else is using this field?)
   /netnote ${If[${NetBots[${Me.CleanName}].Note.Find[ MBPetAffinity]},${NetBots[${Me.CleanName}].Note.Replace[ MBPetAffinity,]},${If[${NetBots[${Me.CleanName}].Note.Find[MBPetAffinity]},${NetBots[${Me.CleanName}].Note.Replace[MBPetAffinity,]},${NetBots[${Me.CleanName}].Note}]}]}
   /endmacro
/return